{"version":3,"sources":["actions/namesAction.ts","components/Autocomplete.tsx","components/ListOfNames.tsx","App.tsx","reducers/namesReducer.ts","store/index.ts","index.tsx"],"names":["NamesActionTypes","Autocomplete","value","onChange","Fragment","placeholder","type","ListOfNames","names","useState","selected","setSelected","className","map","name","data-name","onClick","e","arr","target","dataset","pureNamesSet","Set","n","add","pureNames","Array","from","console","log","addHandler","index","filter","deleteHandler","App","result","setResult","term","setTerm","JSON","parse","localStorage","getItem","dispatch","useDispatch","useEffect","length","a","axios","response","FETCH_NAMES","data","preNames","useSelector","state","namesState","fetchedNames","setItem","stringify","ns","search","splitT","split","w","obj","i","j","toUpperCase","indexOf","delete","res","changeHandler","initialNamesState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32b8f55a.chunk.js","sourcesContent":["import axios from 'axios';\nimport { ActionCreator, Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { IName, INamesState } from '../reducers/namesReducer';\n\n\nexport enum NamesActionTypes {\n    FETCH_NAMES = 'FETCH_NAMES'\n}\n\nexport interface INamesGetAllAction {\n    type: NamesActionTypes.FETCH_NAMES;\n    names: IName[];\n}\n\nexport type NamesAction = INamesGetAllAction\n\nexport const getAllNames: ActionCreator<\nThunkAction<Promise<any>, INamesState, null, INamesGetAllAction>\n> = () => {\n    return async (dispatch: Dispatch) => {\n        try {\n            const response = await axios('https://jsonplaceholder.typicode.com/users');\n            dispatch({\n                type: NamesActionTypes.FETCH_NAMES,\n                names: response.data\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\nexport type getAllNamesAction = typeof getAllNames;\n","import React from 'react';\nimport '../style/main.scss';\n\ninterface IProps {\n    value : any;\n    onChange: any;\n}\n\nconst Autocomplete : React.FC<IProps> = ({ value, onChange }) => {\n\n    return (\n        <React.Fragment>\n            <form>\n                <input \n              placeholder=\"name\"\n              type=\"text\"\n              value={value}\n              onChange={onChange}\n              />\n            </form>\n            <article>\n                <h3>Opis działania:</h3>\n                <h4>Aplikacja zaciąga userów, których lista jest następnie dostarczana do localStorage. Po kliknięciu na element wyrzucony z inputu, dodajemy ten element do drugiej listy. Usuwamy elementy z drugiej listy za pomocą kliknięcia w dany element.</h4>\n            </article>\n        </React.Fragment>\n    )\n}\n    export default Autocomplete;","import React, { useState } from \"react\";\nimport { IOnlyName } from '../App';\nimport '../style/main.scss';\n\ninterface IProps {\n  names: IOnlyName[];\n}\n\n\nconst ListOfNames: React.FC<IProps> = ({ names }) => {\n\n  const [selected, setSelected] = useState([]);\n\n  const addHandler = (e: any): void => {\n    const arr: any = [...selected, e.target.dataset.name]\n    const pureNamesSet = new Set();\n    arr.map((n : string) => pureNamesSet.add(n));\n    const pureNames : any = Array.from(pureNamesSet);\n    console.log(pureNames)\n    setSelected(pureNames)\n  }\n  const deleteHandler = (e: any): void => {\n    setSelected(selected.filter(n => n !== e.target.dataset.name))\n  }\n  return (\n    <div className=\"results-container\">\n      <div className=\"results-list\">\n        {names.map((name) => (\n          <div data-name={`${name}`} onClick={(e) => addHandler(e)} key={`resultName-${name}`}>\n            {name}\n          </div>\n        ))\n        }\n      </div>\n      <div className=\"results-added-names\">\n        {selected.map((name, index) => (\n          <div data-name={`${name}`} onClick={(e) => deleteHandler(e)} key={`selName-${name}`}>\n            {name}\n          </div>\n        ))}\n      </div>\n\n    </div>\n  );\n};\nexport default ListOfNames;\n","import React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"./components/Autocomplete\";\nimport { getAllNames } from \"./actions/namesAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ListOfNames from \"./components/ListOfNames\";\nimport { IName, INamesState } from './reducers/namesReducer';\nimport { IAppState } from './store';\n\nexport interface IOnlyName {\n  name ? : string;\n  toUpperCase: any;\n  indexOf: any;\n}\n\nconst App : React.FC = () => {\n\n  const [result, setResult] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const names : any = JSON.parse(localStorage.getItem('names') || '{}')\n  const dispatch = useDispatch();\n  useEffect(() : void => {\n    if(names.length > 0){\n      return;\n    }else{\n      dispatch(getAllNames());\n    }\n    }, [dispatch,names]); \n    \n  const preNames : INamesState = useSelector((state : IAppState) => state.namesState);\n  const fetchedNames : string[] = preNames && preNames.names && preNames.names.map((n : IName) => n.name);\n  localStorage.setItem('names', JSON.stringify(fetchedNames))\n  const ns : string[] = names || fetchedNames;\n  console.log(fetchedNames) \n  console.log(ns)\n  const changeHandler = (e : any) => {\n    setTerm(e.target.value);\n    if (e.target.value === \"\") {\n      setResult([]);\n    } else if (term.search(/\\s/)) {\n      const presplitT = e.target.value.split(/\\s/);\n      const splitT : IOnlyName[] = presplitT.filter((w: IOnlyName[\"name\"]) => w !== \"\");\n      const obj = new Set();\n      console.log(splitT);\n      for (let i = 0; i < ns.length; i++) {\n        for (let j = 0; j < splitT.length; j++) {\n          if (ns[i].toUpperCase().indexOf(splitT[j].toUpperCase()) > -1) {\n            obj.add(ns[i]);\n          } else {\n            obj.delete(ns[i]);\n          }\n        }\n      }\n      const arr : any = Array.from(obj);\n      setResult(arr);\n    } else {\n      const res : any = ns.filter((name: any) =>\n        name.toUpperCase().indexOf(e.target.value.toUpperCase()) > -1\n          ? name\n          : null\n      );\n      setResult(res);\n    }\n  };\n  return (\n    <div>\n      <main>\n        <Autocomplete onChange={( e : any ) => changeHandler(e)} value={term} />\n        <ListOfNames names={result} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { NamesAction, NamesActionTypes } from '../actions/namesAction';\nimport { Reducer } from 'redux';\n\n\nexport interface IName {\n    id: number;\n    name: string;\n}\nexport interface INamesState {\n    names: IName[];\n}\n\nconst initialNamesState: INamesState = {\n    names: []\n  };\n\nexport const namesReducer: Reducer<INamesState, NamesAction> = ( state = initialNamesState, action ) => {\n    switch (action.type) {\n        case NamesActionTypes.FETCH_NAMES: {\n            return {\n                ...state,\n                names: action.names\n            }\n        }\n        default:\n            return state;\n    }\n}\nexport type RootState = typeof namesReducer","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { namesReducer, INamesState } from '../reducers/namesReducer';\n\nexport interface IAppState {\n   namesState : INamesState\n}\n\nconst rootReducer = combineReducers<IAppState>({\n    namesState: namesReducer\n});\n\nexport default function configureStore(): Store<IAppState, any> {\n    const store = createStore(rootReducer, applyMiddleware(thunk));\n    return store;\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./style/main.scss\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\n// import { getAllNames } from \"./actions/namesAction\";\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Autocomplete.js","actions/namesAction.js","components/ListOfNames.js","App.js","store/index.js","reducers/namesReducer.js","index.js"],"names":["Autocomplete","value","onChange","keyDown","Fragment","onKeyDown","placeholder","type","FETCH_NAMES","ListOfNames","names","map","name","index","App","useState","result","setResult","term","setTerm","dispatch","useDispatch","useEffect","a","axios","response","data","console","log","preNames","useSelector","state","namesState","ns","n","className","e","target","filter","indexOf","changeHandler","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"+NAkBmBA,G,MAhBE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAErC,OACI,cAAC,IAAMC,SAAP,UACI,+BACI,uBACFC,UAAWF,EACXG,YAAY,OACZC,KAAK,OACLN,MAAOA,EACPC,SAAUA,U,yCCVXM,EAAc,c,OCSZC,EATK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrB,OACE,cAAC,IAAMN,SAAP,UACKM,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,4BAAuBD,GAAfA,EAAOC,SCoCVC,EAnCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAEQF,mBAAS,IAFjB,mBAETG,EAFS,KAEHC,EAFG,KAIVC,EAAWC,cAEjBC,qBAAU,WACRF,EFTA,uCAAO,WAAOA,GAAP,eAAAG,EAAA,+EAEwBC,IAAM,8CAF9B,OAEOC,EAFP,OAGCL,EAAS,CACLb,KAAMC,EACNE,MAAOe,EAASC,OALrB,gDAQCC,QAAQC,IAAR,MARD,yDAAP,yDEUC,CAACR,IACJ,IAAMS,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMC,cAC9CL,QAAQC,IAAIC,GACZ,IAAMI,EAAKJ,GAAYA,EAASnB,OAASmB,EAASnB,MAAMC,KAAI,SAACuB,GAAD,OAAOA,EAAEtB,QAErEe,QAAQC,IAAIZ,GAYZ,OACE,qBAAKmB,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,cAAC,EAAD,CAAcjC,SAAU,SAACkC,GAAD,OAbR,SAACA,GACrBjB,EAAQiB,EAAEC,OAAOpC,OACM,KAAnBmC,EAAEC,OAAOpC,MACXgB,EAAU,IAEVA,EACEgB,EAAGK,QAAO,SAAC1B,GAAD,OAAWA,EAAK2B,QAAQH,EAAEC,OAAOpC,QAAU,EAAIW,EAAO,SAOjC4B,CAAcJ,IAAInC,MAAOiB,IACxD,cAAC,EAAD,CAAaR,MAAOM,U,uBChCtByB,EAAcC,YAAgB,CAChCV,WCFwB,WAA2B,IAAzBD,EAAwB,uDAAhB,GAAIY,EAAY,uCAClD,OAAQA,EAAOpC,MACX,KAAKC,EACD,OAAO,2BACAuB,GADP,IAEIrB,MAAOiC,EAAOjC,QAGtB,QACI,OAAOqB,MCJnB,IAAMa,EFCYC,YAAYJ,EAAaK,YAAgBC,MEA3DC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.914b13be.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Autocomplete = ({ value, onChange, keyDown }) => {\n\n    return (\n        <React.Fragment>\n            <form>\n                <input\n              onKeyDown={keyDown} \n              placeholder=\"name\"\n              type=\"text\"\n              value={value}\n              onChange={onChange}\n              />\n            </form>\n        </React.Fragment>\n    )\n}\n    export default Autocomplete;","import axios from 'axios';\n\nexport const FETCH_NAMES = 'FETCH_NAMES';\n\nexport const getAllNames = () => {\n    return async (dispatch) => {\n        try {\n            const response = await axios('https://jsonplaceholder.typicode.com/users');\n            dispatch({\n                type: FETCH_NAMES,\n                names: response.data\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}","import React from \"react\";\n\nconst ListOfNames = ({ names }) => {\n  return (\n    <React.Fragment>\n        {names.map((name, index) => (\n          <p key={name + index}>{name}</p>\n        ))}\n    </React.Fragment>\n  );\n};\nexport default ListOfNames;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Autocomplete from \"./components/Autocomplete\";\nimport { getAllNames } from \"./actions/namesAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ListOfNames from \"./components/ListOfNames\";\n\nconst App = () => {\n  const [result, setResult] = useState([]);\n  const [term, setTerm] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllNames());\n  }, [dispatch]);\n  const preNames = useSelector((state) => state.namesState);\n  console.log(preNames);\n  const ns = preNames && preNames.names && preNames.names.map((n) => n.name);\n\n  console.log(result);\n\n  const changeHandler = (e) => {\n    setTerm(e.target.value);\n    if (e.target.value === \"\") {\n      setResult([]);\n    } else {\n      setResult(\n        ns.filter((name) => (name.indexOf(e.target.value) > -1 ? name : null))\n      );\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"list\">\n        <Autocomplete onChange={(e) => changeHandler(e)} value={term} />\n        <ListOfNames names={result} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { namesReducer } from '../reducers/namesReducer';\n\nconst rootReducer = combineReducers({\n    namesState: namesReducer\n});\n\nexport default function configureStore() {\n    const store = createStore(rootReducer, applyMiddleware(thunk));\n    return store;\n}","import { FETCH_NAMES } from '../actions/namesAction';\n\n\nexport const namesReducer = ( state = {}, action ) => {\n    switch (action.type) {\n        case FETCH_NAMES: {\n            return {\n                ...state,\n                names: action.names\n            }\n        }\n        default:\n            return state;\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\n// import { getAllNames } from \"./actions/namesAction\";\nconst store = configureStore();\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}
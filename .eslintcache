[{"/home/michu/Desktop/alt-autocomp/src/App.tsx":"1","/home/michu/Desktop/alt-autocomp/src/index.tsx":"2","/home/michu/Desktop/alt-autocomp/src/actions/namesAction.ts":"3","/home/michu/Desktop/alt-autocomp/src/store/index.ts":"4","/home/michu/Desktop/alt-autocomp/src/reducers/namesReducer.ts":"5","/home/michu/Desktop/alt-autocomp/src/components/ListOfNames.tsx":"6","/home/michu/Desktop/alt-autocomp/src/components/Autocomplete.tsx":"7"},{"size":2035,"mtime":1610809528366,"results":"8","hashOfConfig":"9"},{"size":617,"mtime":1610787935049,"results":"10","hashOfConfig":"9"},{"size":912,"mtime":1610798036721,"results":"11","hashOfConfig":"9"},{"size":478,"mtime":1610792169639,"results":"12","hashOfConfig":"9"},{"size":662,"mtime":1610797355816,"results":"13","hashOfConfig":"9"},{"size":1080,"mtime":1610809632057,"results":"14","hashOfConfig":"9"},{"size":459,"mtime":1610800412245,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"fqd1sy",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/michu/Desktop/alt-autocomp/src/App.tsx",["31","32"],"import React, { useState, useEffect } from \"react\";\nimport Autocomplete from \"./components/Autocomplete\";\nimport { getAllNames } from \"./actions/namesAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ListOfNames from \"./components/ListOfNames\";\nimport { IName, INamesState } from './reducers/namesReducer';\nimport { IAppState } from './store';\n\nexport interface IOnlyName {\n  name ? : string;\n  toUpperCase: any;\n  indexOf: any;\n}\n\nconst App : React.FC = () => {\n\n  const [result, setResult] = useState([]);\n  const [term, setTerm] = useState(\"\");\n  const [selected, setSelected] = useState([])\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllNames());\n  }, [dispatch]);\n  const preNames : INamesState = useSelector((state : IAppState) => state.namesState);\n  console.log(preNames)\n  const ns : string[] = preNames && preNames.names && preNames.names.map((n : IName) => n.name);\n\n  const changeHandler = (e : any) => {\n    setTerm(e.target.value);\n    if (e.target.value === \"\") {\n      setResult([]);\n    } else if (term.search(/\\s/)) {\n      const presplitT = e.target.value.split(/\\s/);\n      const splitT : IOnlyName[] = presplitT.filter((w: IOnlyName[\"name\"]) => w !== \"\");\n      const obj = new Set();\n      console.log(splitT);\n      for (let i = 0; i < ns.length; i++) {\n        for (let j = 0; j < splitT.length; j++) {\n          if (ns[i].toUpperCase().indexOf(splitT[j].toUpperCase()) > -1) {\n            obj.add(ns[i]);\n          } else {\n            obj.delete(ns[i]);\n          }\n        }\n      }\n      const arr : any = Array.from(obj);\n      setResult(arr);\n    } else {\n      const res : any = ns.filter((name) =>\n        name.toUpperCase().indexOf(e.target.value.toUpperCase()) > -1\n          ? name\n          : null\n      );\n      setResult(res);\n    }\n  };\n  return (\n    <div>\n      <main>\n        <Autocomplete onChange={( e : any ) => changeHandler(e)} value={term} />\n        <ListOfNames names={result} />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","/home/michu/Desktop/alt-autocomp/src/index.tsx",[],"/home/michu/Desktop/alt-autocomp/src/actions/namesAction.ts",[],"/home/michu/Desktop/alt-autocomp/src/store/index.ts",[],"/home/michu/Desktop/alt-autocomp/src/reducers/namesReducer.ts",[],"/home/michu/Desktop/alt-autocomp/src/components/ListOfNames.tsx",[],"/home/michu/Desktop/alt-autocomp/src/components/Autocomplete.tsx",[],{"ruleId":"33","severity":1,"message":"34","line":19,"column":10,"nodeType":"35","messageId":"36","endLine":19,"endColumn":18},{"ruleId":"33","severity":1,"message":"37","line":19,"column":20,"nodeType":"35","messageId":"36","endLine":19,"endColumn":31},"@typescript-eslint/no-unused-vars","'selected' is assigned a value but never used.","Identifier","unusedVar","'setSelected' is assigned a value but never used."]